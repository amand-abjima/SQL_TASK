--WINDOW FUNCTIONS IN SQL SERVER.

CREATE TABLE EMPLOYEE(ID INT,NAMES VARCHAR(50),GENDER VARCHAR(50),AGE INT,SALARY INT);

INSERT INTO EMPLOYEE VALUES(1,'AMAN','MALE',25,14000);
INSERT INTO EMPLOYEE VALUES(2,'GAURAV','MALE',28,17000);
INSERT INTO EMPLOYEE VALUES(3,'NISHA','FEMALE',24,19000);
INSERT INTO EMPLOYEE VALUES(4,'VISHAL','MALE',29,22000);
INSERT INTO EMPLOYEE VALUES(5,'TANU','FEMALE',20,15000);
INSERT INTO EMPLOYEE VALUES(6,'MANJRI','FEMALE',30,18000);
INSERT INTO EMPLOYEE VALUES(7,'RAJESH','MALE',29,13000);
INSERT INTO EMPLOYEE VALUES(8,'ARJUN','MALE',27,16000);
INSERT INTO EMPLOYEE VALUES(9,'PRIYANSHU','MALE',21,19000);
INSERT INTO EMPLOYEE VALUES(10,'NIDHI','FEMALE',28,20000);
INSERT INTO EMPLOYEE VALUES(11,'VIDHI','FEMALE',22,12000);

ALTER TABLE EMPLOYEE ADD CITY VARCHAR(30);

UPDATE EMPLOYEE SET CITY = 'AGRA' WHERE ID IN(1,4,6,8,11);
UPDATE EMPLOYEE SET CITY = 'JAIPUR' WHERE ID IN(2,3,5,7,9,10);

SELECT * FROM EMPLOYEE;

SELECT GENDER FROM EMPLOYEE GROUP BY GENDER;

SELECT GENDER,COUNT(*) AS GENDER_TOTAL FROM EMPLOYEE GROUP BY GENDER;

SELECT * FROM EMPLOYEE;
SELECT GENDER,COUNT(*) AS GENDER_TOTAL FROM EMPLOYEE GROUP BY GENDER;

SELECT NAMES,E.GENDER,SALARY,GENDERS.GENDER_TOTAL FROM EMPLOYEE E
INNER JOIN
(SELECT GENDER,COUNT(*) AS GENDER_TOTAL FROM EMPLOYEE GROUP BY GENDER) AS GENDERS
ON E.GENDER = GENDERS.GENDER;

SELECT NAMES,GENDER,SALARY,COUNT(GENDER) OVER(PARTITION BY GENDER) FROM EMPLOYEE;

SELECT GENDER,
COUNT(*) AS GENDER_TOTAL,
MAX(SALARY) AS MAXIMUM_SALARY,
MIN(SALARY) AS MINIMUM_SALARY,
AVG(SALARY) AS AVERAGE_SALARY
FROM EMPLOYEE GROUP BY GENDER;

SELECT NAMES,E.GENDER,SALARY,GENDERS.GENDER_TOTAL,GENDERS.MAXIMUM_SALARY,GENDERS.MINIMUM_SALARY,GENDERS.AVERAGE_SALARY 
FROM EMPLOYEE E
INNER JOIN
(SELECT GENDER,
COUNT(*) AS GENDER_TOTAL,
MAX(SALARY) AS MAXIMUM_SALARY,
MIN(SALARY) AS MINIMUM_SALARY,
AVG(SALARY) AS AVERAGE_SALARY
FROM EMPLOYEE GROUP BY GENDER) AS GENDERS
ON E.GENDER = GENDERS.GENDER;

SELECT NAMES,GENDER,SALARY,
COUNT(*) OVER(PARTITION BY GENDER ) AS GENDER_TOTAL,
MAX(SALARY) OVER(PARTITION BY GENDER) AS MAXIMUM_SALARY,
MIN(SALARY) OVER(PARTITION BY GENDER) AS MINIMUM_SALARY,
AVG(SALARY) OVER(PARTITION BY GENDER) AS AVERAGE_SALARY
FROM EMPLOYEE;

SELECT NAMES,GENDER,SALARY,
COUNT(*) OVER(PARTITION BY GENDER) AS GENDER_TOTAL,
MAX(SALARY) OVER(PARTITION BY GENDER ORDER BY NAMES) AS MAXIMUM_SALARY,
MIN(SALARY) OVER(PARTITION BY GENDER ORDER BY NAMES) AS MINIMUM_SALARY,
AVG(SALARY) OVER(PARTITION BY GENDER ORDER BY NAMES) AS AVERAGE_SALARY
FROM EMPLOYEE;

--ROW_NUMBER() FUNCTION.

SELECT *, ROW_NUMBER() OVER(ORDER BY NAMES) AS ROWNUMBERING FROM EMPLOYEE;

SELECT *, ROW_NUMBER() OVER(ORDER BY NAMES DESC) AS ROWNUMBERING FROM EMPLOYEE;

SELECT *, ROW_NUMBER() OVER(PARTITION BY GENDER ORDER BY NAMES) AS ROWNUMBERING FROM EMPLOYEE;

SELECT *, ROW_NUMBER() OVER(PARTITION BY CITY ORDER BY NAMES) AS ROWNUMBERING FROM EMPLOYEE;

--RANK() FUNCTION.

SELECT NAMES,GENDER,AGE,SALARY,RANK() OVER(ORDER BY AGE) AS RANKS FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
RANK() OVER(PARTITION BY GENDER ORDER BY AGE) AS RANKS 
FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
RANK() OVER(PARTITION BY GENDER ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

--DENSE_RANK() FUNCTION.

SELECT NAMES,GENDER,AGE,SALARY,DENSE_RANK() OVER(ORDER BY AGE) AS RANKS FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
DENSE_RANK() OVER(PARTITION BY GENDER ORDER BY AGE) AS RANKS 
FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
DENSE_RANK() OVER(PARTITION BY GENDER ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
RANK() OVER(PARTITION BY GENDER ORDER BY AGE DESC) AS RANKS,
DENSE_RANK() OVER(PARTITION BY GENDER ORDER BY AGE) AS DRANKS 
FROM EMPLOYEE;

--NTILE(N)

SELECT NAMES,GENDER,AGE,SALARY,
NTILE(2) OVER(ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
NTILE(4) OVER(ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

--LAG()

SELECT NAMES,GENDER,AGE,SALARY,
LAG(SALARY) OVER(ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
LAG(SALARY) OVER(PARTITION BY GENDER ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

--LEAD()

SELECT NAMES,GENDER,AGE,SALARY,
LEAD(SALARY) OVER(ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
LEAD(SALARY) OVER(PARTITION BY GENDER ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

--FIRST_VALUE()

SELECT NAMES,GENDER,AGE,SALARY,
FIRST_VALUE(SALARY) OVER(ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
FIRST_VALUE(SALARY) OVER(PARTITION BY GENDER ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

--LAST_VALUE()

SELECT NAMES,GENDER,AGE,SALARY,
LAST_VALUE(SALARY) OVER(ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

SELECT NAMES,GENDER,AGE,SALARY,
LAST_VALUE(SALARY) OVER(PARTITION BY GENDER ORDER BY AGE DESC) AS RANKS
FROM EMPLOYEE;

--CURSOR

DECLARE @ID INT
DECLARE @NAME VARCHAR(50)
DECLARE @AGE INT
DECLARE @SALARY INT
DECLARE EMPCURSOR CURSOR FOR SELECT ID,NAMES,AGE FROM EMPLOYEE
OPEN EMPCURSOR
        IF @@CURSOR_ROWS > 0 
        BEGIN 
            FETCH NEXT FROM EMPCURSOR INTO @ID,@NAME,@AGE,@SALARY
            WHILE @@FETCH_STATUS = 0
            BEGIN
                   PRINT 'ID : '+ CONVERT(VARCHAR(10),@ID)
                   PRINT 'NAME : '+ @NAME
                   PRINT 'AGE : '+CONVERT(VARCHAR(10),@AGE)
                   PRINT 'SALARY : '+CONVERT(VARCHAR(10),@SALARY)
                  FETCH NEXT FROM EMPCURSOR INTO @ID,@NAME,@AGE,@SALARY
            END
       END
CLOSE EMPCURSOR
DEALLOCATE EMPCURSOR
