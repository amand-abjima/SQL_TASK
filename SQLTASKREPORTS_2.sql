--The fundamentals of Transact-SQL(T-SQL)

--Getting Started with SELECT statement

--Understand the logical query processing.

-- General structure or syntax of SELECT statement.

-- To retrieve all coulmns.

SELECT * 
FROM <table>
WHERE <predicate on rows>   --(Optional Clause)
GROUP BY <column1, column2 . . .>   --(Optional Clause)
HAVING <predicate on groups>    --(Optional Clause)
ORDER BY <column1, column2 . . .>   --(Optional Clause)

-- Retrieve records according to individual column

SELECT <column1, column2 . . .> 
FROM <table>
WHERE <predicate on rows>   --(Optional Clause)
GROUP BY <column1, column2 . . .>   --(Optional Clause)
HAVING <predicate on groups>    --(Optional Clause)
ORDER BY <column1, column2 . . .>   --(Optional Clause)

--Filtering data using WHERE clause.

CREATE TABLE EMPLOYEE1(ETYPE VARCHAR(20),TITLE VARCHAR(10),FIRST_NAME VARCHAR(30),LAST_NAME VARCHAR(20),DOJ DATETIME);

INSERT INTO EMPLOYEE1 VALUES('EM','MS.','GAURANG','TIWARI','2022/11/11');

INSERT INTO EMPLOYEE1(ETYPE,FIRST_NAME,LAST_NAME,DOJ) VALUES('TR','ABHISHEK','GOYAL','1991/07/11');

SELECT * FROM EMPLOYEE1;

--Write a query to retrieve data whose last name is 'Singh'

SELECT * FROM EMPLOYEE1 WHERE LAST_NAME='SINGH';

--Write a query to retrieve data whose last name is 'SHARMA'

SELECT * FROM EMPLOYEE1 WHERE LAST_NAME='SHARMA';
  
--Write a query to retrieve data whose title is not 'Mr.'

SELECT * FROM EMPLOYEE1 WHERE Title <> 'Mr.'; --It will also discard NULL value rows.

--Write a query to retrieve all employee data whose title is 'Mr.'

SELECT * FROM EMPLOYEE1 WHERE Title = 'Mr.'; --It will also discard NULL value rows.

--Write a query to retrieve all employee data whose title is 'Ms.'

SELECT * FROM EMPLOYEE1 WHERE Title = 'Ms.'; --It will also discarded NULL value rows.

SELECT * FROM EMPLOYEE1 WHERE Title <> 'Ms.' OR TITLE IS NULL; -- It will show NULL value rows and also Title values. 

-- ADD a column by using ALTER command.

ALTER TABLE EMPLOYEE1 ADD AGE INT;

SELECT * FROM EMPLOYEE1;

--UPDATE a row after adding column by using ALTER command.

UPDATE EMPLOYEE1 SET AGE=40 WHERE FIRST_NAME='GAURANG';

--BETWEEN

SELECT * FROM EMPLOYEE1 WHERE AGE BETWEEN 30 AND 40;

SELECT * FROM EMPLOYEE1 WHERE AGE BETWEEN 22 AND 26;

SELECT * FROM EMPLOYEE1 WHERE AGE BETWEEN 20 AND 30 ORDER BY FIRST_NAME;

--COMPARISON OPERATOR

SELECT * FROM EMPLOYEE1 WHERE AGE>25;

SELECT * FROM EMPLOYEE1 WHERE AGE>35 ORDER BY TITLE;

SELECT * FROM EMPLOYEE1 WHERE AGE<30;

SELECT * FROM EMPLOYEE1 WHERE AGE<28 ORDER BY LAST_NAME;

SELECT * FROM EMPLOYEE1 WHERE AGE>=22;

SELECT * FROM EMPLOYEE1 WHERE AGE>=40;

SELECT * FROM EMPLOYEE1 WHERE AGE<=30;

SELECT * FROM EMPLOYEE1 WHERE AGE<=24;

--LIKE OPERATOR

SELECT ETYPE,FIRST_NAME,LAST_NAME FROM EMPLOYEE1 WHERE LAST_NAME LIKE 'SIN%';

SELECT ETYPE,FIRST_NAME,LAST_NAME FROM EMPLOYEE1 WHERE LAST_NAME LIKE '%MA';

SELECT * FROM EMPLOYEE1 WHERE FIRST_NAME LIKE 'A%';

SELECT ETYPE,FIRST_NAME,LAST_NAME FROM EMPLOYEE1 WHERE LAST_NAME LIKE '%ARM%';

SELECT ETYPE,FIRST_NAME,LAST_NAME FROM EMPLOYEE1 WHERE FIRST_NAME LIKE '%URA%';

SELECT * FROM EMPLOYEE1 WHERE FIRST_NAME LIKE '_____V';

SELECT * FROM EMPLOYEE1 WHERE FIRST_NAME LIKE '%N';

--IN OPERATOR

SELECT * FROM EMPLOYEE1 WHERE AGE IN (30,40);

SELECT * FROM EMPLOYEE1 WHERE AGE IN (20,27);

SELECT * FROM EMPLOYEE1 WHERE TITLE IN ('MR.','MS.');

SELECT * FROM EMPLOYEE1 WHERE AGE=20 OR AGE=27;

--NOT IN OPERATOR

SELECT * FROM EMPLOYEE1 WHERE AGE NOT IN (20,29);

SELECT * FROM EMPLOYEE1 WHERE AGE NOT IN (24,27);

--LOGICAL OPERATOR

SELECT * FROM EMPLOYEE1 WHERE FIRST_NAME='GAURAV' AND AGE=27;

SELECT * FROM EMPLOYEE1 WHERE FIRST_NAME='SONU' AND LAST_NAME='SINGH';

SELECT * FROM EMPLOYEE1 WHERE FIRST_NAME='GAURANG' OR LAST_NAME='SHARMA'; --It will show record in different ways according to whose first_name is either 'GAURANG'or last_name is either 'SHARMA'.

SELECT * FROM EMPLOYEE1 WHERE FIRST_NAME='RAHUL' OR LAST_NAME='SINGH';

SELECT * FROM EMPLOYEE1 WHERE FIRST_NAME='SONU'  AND NOT LAST_NAME='SHARMA';

SELECT * FROM EMPLOYEE1 WHERE NOT FIRST_NAME='AMAN'  AND NOT LAST_NAME='SHARMA';

--Sorting data by using ORDER BY Clause.

SELECT * FROM EMPLOYEE1 ORDER BY DOJ;

SELECT * FROM EMPLOYEE1 ORDER BY LAST_NAME;

SELECT * FROM EMPLOYEE1 ORDER BY FIRST_NAME;

SELECT * FROM EMPLOYEE1 ORDER BY FIRST_NAME DESC;

SELECT * FROM EMPLOYEE1 ORDER BY LAST_NAME DESC;

SELECT * FROM EMPLOYEE1 ORDER BY DOJ DESC;

SELECT * FROM EMPLOYEE1 ORDER BY FIRST_NAME,LAST_NAME DESC;

SELECT * FROM EMPLOYEE1 ORDER BY 3,4 DESC;

--Grouping data by using GROUP BY clause.

SELECT LAST_NAME,COUNT(*) AS TOTALEMPLOYEEWITHSAMELASTNAME FROM EMPLOYEE1 GROUP BY LAST_NAME;

SELECT LAST_NAME,COUNT(*) AS TOTALEMPLOYEEWITHSAMELASTNAME FROM EMPLOYEE1 GROUP BY LAST_NAME ORDER BY LAST_NAME;

SELECT AGE,COUNT(*) AS TOTALEMPLOYEEWITHSAMEAGE FROM EMPLOYEE1 GROUP BY AGE ORDER BY AGE;

SELECT COUNT(*) FROM EMPLOYEE1;

SELECT LAST_NAME FROM EMPLOYEE1 GROUP BY LAST_NAME; --It will show unique last name records. 

SELECT DISTINCT LAST_NAME FROM EMPLOYEE1; --It will also show unique last name records. 

SELECT YEAR(GETDATE());

--AGGREGATE FUNCTION

SELECT COUNT(*) FROM EMPLOYEE1; --It will return total no. of rows including NULL value.

SELECT COUNT(TITLE) FROM EMPLOYEE1;  --It will ignore rows including NULL value.

SELECT COUNT(DISTINCT LAST_NAME) FROM EMPLOYEE1; 

SELECT * FROM PRODUCT;

SELECT SUM(PRICE) AS TOTALSUM FROM PRODUCT;

SELECT SUM(PRICE) AS TOTALSUM FROM PRODUCT WHERE QUANTITY=2;

SELECT AVG(PRICE) AS TOTALSUM FROM PRODUCT;

SELECT SUM(PRICE) AS TOTALSUM FROM PRODUCT WHERE PRODUCT_NAME='ITEM 1';

SELECT MAX(PRICE) AS TOTALSUM FROM PRODUCT;

SELECT MIN(PRICE) AS TOTALSUM FROM PRODUCT;

SELECT LAST_NAME,COUNT(*) FROM EMPLOYEE1 GROUP BY LAST_NAME HAVING COUNT(*)>=2;

SELECT PRODUCT_ID,SUM(PRICE) FROM PRODUCT GROUP BY PRODUCT_ID HAVING SUM(PRICE)>=1000;

SELECT PRODUCT_ID,SUM(PRICE) FROM PRODUCT GROUP BY PRODUCT_ID HAVING SUM(PRICE)<=200 ORDER BY PRODUCT_ID;

--Limiting the result data using TOP(n) clause.

SELECT TOP 3 * FROM EMPLOYEE1;

SELECT TOP 3 ETYPE,FIRST_NAME,DOJ FROM EMPLOYEE1;

SELECT TOP 50 PERCENT ETYPE,FIRST_NAME,DOJ FROM EMPLOYEE1;

SELECT TOP 30 PERCENT * FROM EMPLOYEE1;

SELECT TOP 1 PERCENT * FROM EMPLOYEE1;

SELECT * FROM EMPLOYEE1;

SELECT TOP 4 WITH TIES LAST_NAME,DOJ,AGE FROM EMPLOYEE1 ORDER BY LAST_NAME;




