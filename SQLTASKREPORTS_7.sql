USE ADVENTUREWORKS2022;

--To Select all columns.

SELECT * FROM HUMANRESOURCES.DEPARTMENT;

SELECT * FROM HUMANRESOURCES.EMPLOYEE;

--Retrieve records from specified columns.

SELECT BUSINESSENTITYID, NATIONALIDNUMBER,JOBTITLE FROM HUMANRESOURCES.EMPLOYEE;

--Retrieve distinct records.

SELECT DISTINCT JOBTITLE FROM HUMANRESOURCES.EMPLOYEE; 

--WHERE clause.

SELECT BUSINESSENTITYID,JOBTITLE FROM HUMANRESOURCES.EMPLOYEE WHERE JOBTITLE='BUYER';

SELECT BUSINESSENTITYID,JOBTITLE FROM HUMANRESOURCES.EMPLOYEE WHERE JOBTITLE='Research and Development Manager';

SELECT BUSINESSENTITYID,JOBTITLE FROM HUMANRESOURCES.EMPLOYEE WHERE BUSINESSENTITYID > 50;

SELECT BUSINESSENTITYID,JOBTITLE FROM HUMANRESOURCES.EMPLOYEE WHERE BUSINESSENTITYID >= 50;

SELECT BUSINESSENTITYID,JOBTITLE,BIRTHDATE FROM HUMANRESOURCES.EMPLOYEE WHERE BUSINESSENTITYID < 30;

SELECT BUSINESSENTITYID,JOBTITLE,MARITALSTATUS,GENDER FROM HUMANRESOURCES.EMPLOYEE WHERE BUSINESSENTITYID <= 20;

--Airthmatic Operator.

SELECT * FROM PURCHASING.PURCHASEORDERHEADER;

--ADDITION.

SELECT SUBTOTAL,TAXAMT,SUBTOTAL+TAXAMT AS SUBTOTALWITHTAXAMT FROM PURCHASING.PURCHASEORDERHEADER;

--SUBTRACTION.

SELECT SUBTOTAL,TAXAMT,SUBTOTAL-TAXAMT AS DIFFERENCES FROM PURCHASING.PURCHASEORDERHEADER;

--MULTIPLICATION.

SELECT SUBTOTAL,TAXAMT,SUBTOTAL * TAXAMT AS MULTIPLY FROM PURCHASING.PURCHASEORDERHEADER;

--DIVISON.

SELECT SUBTOTAL,TAXAMT,SUBTOTAL/TAXAMT AS DIVIDE FROM PURCHASING.PURCHASEORDERHEADER;

SELECT SUBTOTAL,TAXAMT,SUBTOTAL/0 AS DIVIDE FROM PURCHASING.PURCHASEORDERHEADER; --It will show 'Divide by zero error encountered'.
--So divisor will never be 0.

--To avoid 'Divide by zero error encountered' problem.

SELECT SUBTOTAL,TAXAMT,SUBTOTAL/TAXAMT AS DIVIDE FROM PURCHASING.PURCHASEORDERHEADER WHERE TAXAMT > 0;

--'+' Operator and Concatenation.

--SELECT SUBTOTAL,TAXAMT,SUBTOTAL+TAXAMT AS SUBTOTALWITHTAXAMT FROM PURCHASING.PURCHASEORDERHEADER 
--WHERE SUBTOTALWITHTAXAMT>50;

SELECT SUBTOTAL,TAXAMT,SUBTOTAL+TAXAMT AS SUBTOTALWITHTAXAMT FROM PURCHASING.PURCHASEORDERHEADER 
WHERE SUBTOTAL+TAXAMT>500;

SELECT SUBTOTAL,TAXAMT,SUBTOTAL+TAXAMT AS SUBTOTALWITHTAXAMT FROM PURCHASING.PURCHASEORDERHEADER 
WHERE SUBTOTAL+TAXAMT>10000;

SELECT * FROM PERSON.PERSON;

SELECT FIRSTNAME,MIDDLENAME,LASTNAME FROM PERSON.PERSON;

SELECT FIRSTNAME,MIDDLENAME,LASTNAME,FIRSTNAME+ ' '+MIDDLENAME+ ' '+LASTNAME FROM PERSON.PERSON;

--NULL.

SELECT FIRSTNAME,MIDDLENAME,LASTNAME FROM PERSON.PERSON WHERE MIDDLENAME IS NULL;

SELECT FIRSTNAME,MIDDLENAME,LASTNAME FROM PERSON.PERSON WHERE MIDDLENAME IS NOT NULL;

--AND, OR.

--AND.

SELECT * FROM HUMANRESOURCES.EMPLOYEE;

SELECT * FROM HUMANRESOURCES.EMPLOYEE WHERE MARITALSTATUS='M' AND GENDER='M';

SELECT * FROM HUMANRESOURCES.EMPLOYEE WHERE MARITALSTATUS='S' AND GENDER='F';

--OR.

SELECT * FROM HUMANRESOURCES.EMPLOYEE WHERE JOBTITLE = 'STOCKER' OR JOBTITLE = 'BUYER';

SELECT * FROM HUMANRESOURCES.EMPLOYEE WHERE JOBTITLE = 'DESIGN ENGINEER' OR JOBTITLE = 'TOOL DESIGNER';

--BETWEEN, IN.

--IN.

SELECT * FROM HUMANRESOURCES.EMPLOYEE WHERE JOBTITLE IN ('DESIGN ENGINEER','TOOL DESIGNER');

SELECT * FROM HUMANRESOURCES.EMPLOYEE WHERE BUSINESSENTITYID IN (1,6,33,89);

--BETWEEN.

SELECT * FROM HUMANRESOURCES.EMPLOYEE WHERE BUSINESSENTITYID BETWEEN 1 AND 33;

--MATCHING PATTERNS(LIKE).

SELECT * FROM PERSON.STATEPROVINCE;

SELECT * FROM PERSON.STATEPROVINCE WHERE NAME LIKE 'A%';

SELECT * FROM PERSON.STATEPROVINCE WHERE NAME LIKE 'ALA%';

SELECT * FROM PERSON.STATEPROVINCE WHERE NAME LIKE '%O';

SELECT * FROM PERSON.STATEPROVINCE WHERE NAME LIKE '%IA';

SELECT * FROM PERSON.STATEPROVINCE WHERE NAME LIKE 'AL____';

SELECT * FROM PERSON.STATEPROVINCE WHERE NAME LIKE 'CAL_______';

SELECT * FROM PERSON.STATEPROVINCE WHERE NAME LIKE '%NNE%';

--ORDER BY Clause.

SELECT * FROM PERSON.ADDRESS;

SELECT CITY, POSTALCODE FROM PERSON.ADDRESS ORDER BY CITY DESC;

SELECT CITY, POSTALCODE FROM PERSON.ADDRESS ORDER BY POSTALCODE DESC;

SELECT * FROM PERSON.PERSON;

SELECT FIRSTNAME,LASTNAME FROM PERSON.PERSON WHERE FIRSTNAME LIKE 'Z%' ORDER BY FIRSTNAME ASC;

SELECT FIRSTNAME,LASTNAME,MIDDLENAME FROM PERSON.PERSON WHERE MIDDLENAME IS NOT NULL ORDER BY FIRSTNAME DESC,LASTNAME ASC;

--GROUP BY Clause.

SELECT * FROM SALES.SALESORDERDETAIL;

SELECT SALESORDERID,UNITPRICE FROM SALES.SALESORDERDETAIL;

SELECT SALESORDERID,SUM(UNITPRICE) AS TOTALUNITPRICEPERSALES FROM SALES.SALESORDERDETAIL GROUP BY SALESORDERID;

SELECT SALESORDERID,AVG(UNITPRICE) AS AVGUNITPRICEPERSALES FROM SALES.SALESORDERDETAIL GROUP BY SALESORDERID;

SELECT SALESORDERID,COUNT(UNITPRICE) AS COUNTUNITPRICE FROM SALES.SALESORDERDETAIL GROUP BY SALESORDERID;

SELECT SALESORDERID,MAX(UNITPRICE) AS MAXUNITPRICE FROM SALES.SALESORDERDETAIL GROUP BY SALESORDERID;

SELECT SALESORDERID,MIN(UNITPRICE) AS MINUNITPRICE FROM SALES.SALESORDERDETAIL GROUP BY SALESORDERID;

-- STRING FUNCTIONS.

SELECT * FROM PERSON.PERSON;

--CONCAT().

SELECT FIRSTNAME,MIDDLENAME,LASTNAME,CONCAT(FIRSTNAME,' ',MIDDLENAME,' ',LASTNAME) AS FULLNAME FROM PERSON.PERSON;
--CONCAT() work better with NULL values as compared to '+' operator.

--LEN().

SELECT FIRSTNAME,LEN(FIRSTNAME) AS LENGTH FROM PERSON.PERSON;

--LEFT().

SELECT FIRSTNAME,LEFT(FIRSTNAME,2) AS LEFTNAME FROM PERSON.PERSON;

--RIGHT().

SELECT FIRSTNAME,RIGHT(FIRSTNAME,3) AS RIGHTNAME FROM PERSON.PERSON;

--SUBSTRING()

SELECT FIRSTNAME,SUBSTRING(FIRSTNAME,3,6) AS SUBSTRINGNAME FROM PERSON.PERSON;

--DATE FUNCTIONS.

SELECT * FROM SALES.SALESORDERHEADER;

SELECT SALESORDERID,ORDERDATE,DAY(ORDERDATE) AS DATEDAY FROM SALES.SALESORDERHEADER; --It will return a day from date.

SELECT SALESORDERID,ORDERDATE,MONTH(ORDERDATE) AS DATEDAY FROM SALES.SALESORDERHEADER; --It will return a month from date.

SELECT SALESORDERID,ORDERDATE,YEAR(ORDERDATE) AS DATEDAY FROM SALES.SALESORDERHEADER; --It will return a YEAR from date.

SELECT CURRENT_TIMESTAMP;--It will extract current system date with time without any timezone.

--HAVING Clause.

SELECT * FROM SALES.SALESORDERDETAIL;

SELECT SALESORDERID,SUM(UNITPRICE) AS TOTALUNITPRICEPERSALES
FROM SALES.SALESORDERDETAIL
WHERE SALESORDERID > 50000
GROUP BY SALESORDERID
HAVING SUM(UNITPRICE) > 10000
ORDER BY SALESORDERID DESC;

--SUBQUERIES.

SELECT * FROM PURCHASING.PURCHASEORDERHEADER;

SELECT * FROM PURCHASING.PURCHASEORDERDETAIL;

SELECT PURCHASEORDERID,EMPLOYEEID 
FROM PURCHASING.PURCHASEORDERHEADER 
WHERE PURCHASEORDERID IN 
(SELECT PURCHASEORDERID FROM PURCHASING.PURCHASEORDERDETAIL WHERE PURCHASEORDERDETAILID > 5);


SELECT PURCHASEORDERID,EMPLOYEEID 
FROM PURCHASING.PURCHASEORDERHEADER 
WHERE PURCHASEORDERID =  (SELECT PURCHASEORDERID FROM PURCHASING.PURCHASEORDERDETAIL WHERE PURCHASEORDERDETAILID = 5);

--UNION and UNION ALL.

SELECT * FROM HUMANRESOURCES.EMPLOYEE;

SELECT * FROM PERSON.PERSON;

SELECT * FROM SALES.CUSTOMER;

--UNION.

SELECT BUSINESSENTITYID FROM HUMANRESOURCES.EMPLOYEE
UNION
SELECT BUSINESSENTITYID FROM PERSON.PERSON
UNION
SELECT CUSTOMERID FROM SALES.CUSTOMER;

--UNION ALL.

SELECT BUSINESSENTITYID FROM HUMANRESOURCES.EMPLOYEE
UNION ALL
SELECT BUSINESSENTITYID FROM PERSON.PERSON
UNION ALL
SELECT CUSTOMERID FROM SALES.CUSTOMER;

--JOINS

--INNER JOIN.

SELECT * FROM PURCHASING.PURCHASEORDERDETAIL;

SELECT * FROM PURCHASING.PURCHASEORDERHEADER;

SELECT P1.PURCHASEORDERID,P1.PURCHASEORDERDETAILID,P2.ORDERDATE,P2.SHIPMETHODID 
FROM PURCHASING.PURCHASEORDERDETAIL P1
INNER JOIN
PURCHASING.PURCHASEORDERHEADER P2
ON P1.PURCHASEORDERID = P2.PURCHASEORDERID;

SELECT P1.BUSINESSENTITYID,P1.FIRSTNAME,P1.LASTNAME,P2.BUSINESSENTITYID,P2.ADDRESSID
FROM PERSON.PERSON P1
INNER JOIN
PERSON.BUSINESSENTITYADDRESS P2
ON P1.BUSINESSENTITYID = P2.BUSINESSENTITYID;

--LEFT JOIN/LEFT OUTER JOIN.

SELECT * FROM PERSON.PERSON;

SELECT * FROM PERSON.BUSINESSENTITYADDRESS;

SELECT P1.BUSINESSENTITYID,P1.FIRSTNAME,P1.LASTNAME,P2.BUSINESSENTITYID,P2.ADDRESSID
FROM PERSON.PERSON P1
LEFT JOIN
PERSON.BUSINESSENTITYADDRESS P2
ON P1.BUSINESSENTITYID = P2.BUSINESSENTITYID;

--RIGHT JOIN/RIGHT OUTER JOIN.

SELECT * FROM PERSON.PERSON;

SELECT * FROM PERSON.BUSINESSENTITYADDRESS;

SELECT P1.BUSINESSENTITYID,P1.FIRSTNAME,P1.LASTNAME,P2.BUSINESSENTITYID,P2.ADDRESSID
FROM PERSON.PERSON P1
RIGHT JOIN
PERSON.BUSINESSENTITYADDRESS P2
ON P1.BUSINESSENTITYID = P2.BUSINESSENTITYID;

--FULL JOIN/FULL OUTER JOIN.

SELECT * FROM PERSON.PERSON;

SELECT * FROM PERSON.BUSINESSENTITYADDRESS;

SELECT P1.BUSINESSENTITYID,P1.FIRSTNAME,P1.LASTNAME,P2.BUSINESSENTITYID,P2.ADDRESSID
FROM PERSON.PERSON P1
FULL OUTER JOIN
PERSON.BUSINESSENTITYADDRESS P2
ON P1.BUSINESSENTITYID = P2.BUSINESSENTITYID;

CREATE TABLE PAYMENT(CUSTOMERID BIGINT PRIMARY KEY,AMOUNT BIGINT,MODE VARCHAR(20),PAYMENT_DATE DATE);

INSERT INTO PAYMENT VALUES(1,60,'CASH','2020-09-24'),
(11,80,'CASH','2021-03-01'),
(2,500,'CREDIT CARD','2020-04-27'),
(8,100,'CASH','2021-01-26'),
(7,20,'UPI','2021-02-01'),
(17,250,'CREDIT CARD','2021-04-01'),
(10,70,'UPI','2021-02-28');

SELECT * FROM PAYMENT;

CREATE TABLE CUSTOMER(CUSTOMERID BIGINT PRIMARY KEY,FIRSTNAME VARCHAR(30),LASTNAME VARCHAR(30),ADDRESSID BIGINT);

INSERT INTO CUSTOMER VALUES(1,'MARY','SMITH',5),
(3,'LINDA','WILLIMS',7),
(4,'BARBARA','JONES',8),
(2,'MADAN','MOHAN',6),
(17,'R','MADHAV',9);

SELECT * FROM PAYMENT;

SELECT * FROM CUSTOMER;

WITH PAY AS (
SELECT * FROM PAYMENT WHERE AMOUNT=500)
SELECT CUSTOMERID,MODE,PAYMENT_DATE FROM PAY;

WITH PAY AS (
SELECT MODE FROM PAYMENT GROUP BY MODE)
SELECT MODE FROM PAY;

--CREATE Statements.

CREATE DATABASE COVID19;

CREATE TABLE COVIDSTATS 
(CovidID INT IDENTITY(1,3),
CovidDate DATETIME,
DailyConfirmedCases INT,
DailyDeaths SMALLINT,
Country VARCHAR(25),
CovidFlag bit,
TotalLoss Money
);

--SELECT Statement.

SELECT * FROM COVIDSTATS;

--INSERT Statement.

INSERT INTO COVIDSTATS VALUES('4/25/2020',1000,10,'USA',1,1000000);

INSERT INTO COVIDSTATS(COVIDDATE,COUNTRY) VALUES('4/25/2020','TUVALU');

INSERT INTO COVIDSTATS VALUES('4/25/2020',800,6,'BRAZIL',1,500000),
('4/25/2020',750,6,'RUSSIA',1,550000),
('4/25/2020',0,0,'PALAU',0,5000);

--UPDATE Statement.

UPDATE COVIDSTATS SET CovidFlag = 0, TotalLoss=100 WHERE CovidID=4;

--ALTER Statement.

--ADD a column.

ALTER TABLE COVIDSTATS ADD CONTINENT CHAR(15);

--MODIFY a column.

ALTER TABLE COVIDSTATS ALTER COLUMN CONTINENT VARCHAR(20);

--DROP a column.

ALTER TABLE COVIDSTATS DROP COLUMN CONTINENT;

--DROP multiple columns.

ALTER TABLE table_name DROP COLUMN Column1,Column2,. . . . . . . .,ColumnN;

--DELETE records.

--Delete particular record.

DELETE FROM COVIDSTATS WHERE Country = 'RUSSIA' AND CovidFlag = 1;

--Delete all records from table.

DELETE FROM COVIDSTATS;

--Delete top 2 records from table.

DELETE TOP(2) FROM COVIDSTATS;

--Delete top 10 percent records from table.

DELETE TOP(10) PERCENT FROM COVIDSTATS;

--Deleting table permanently.

--DROP Statement.

DROP TABLE table_name;

DROP TABLE COVIDSTATS;