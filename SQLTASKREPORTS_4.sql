SELECT * FROM TABLE_STUDENT;

SELECT * FROM TABLE_STUDENTCOURSE;

SELECT * FROM TABLE_COURSE;

SELECT * FROM TABLE_GENDER;

--INNER JOIN.

SELECT * FROM TABLE_STUDENT INNER JOIN TABLE_STUDENTCOURSE ON TABLE_STUDENT.STUDENTID=TABLE_STUDENTCOURSE.STUDENTID; 

SELECT * FROM TABLE_STUDENT INNER JOIN TABLE_STUDENTCOURSE ON TABLE_STUDENT.STUDENTID=TABLE_STUDENTCOURSE.STUDENTID ORDER BY FIRSTNAME; 

SELECT * FROM TABLE_STUDENT INNER JOIN TABLE_STUDENTCOURSE ON TABLE_STUDENT.STUDENTID=TABLE_STUDENTCOURSE.STUDENTID WHERE GENDERID>1 ORDER BY FIRSTNAME; 

--ALIAS.

--COLUMN ALIAS.

SELECT *, (FIRSTNAME + ' ' + MIDDLENAME + ' ' + LASTNAME) AS FULLNAME FROM TABLE_STUDENT; 

SELECT STUDENTID, GENDERID, BIRTHDATE AS DOB FROM TABLE_STUDENT;

--TABLE ALIAS.

SELECT * FROM TABLE_STUDENT T1 INNER JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID; 

SELECT * FROM TABLE_STUDENT T1 INNER JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID ORDER BY T1.FIRSTNAME; 

SELECT * FROM TABLE_STUDENT T1 INNER JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID ORDER BY T1.LASTNAME DESC; 

--RIGHT OUTER JOIN/RIGHT JOIN.

SELECT * FROM TABLE_STUDENT T1 RIGHT JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID; 

SELECT * FROM TABLE_STUDENTCOURSE AS T1 RIGHT OUTER JOIN TABLE_STUDENT AS T2 ON T1.STUDENTID=T2.STUDENTID; 

--To know how many student have multiple courses.

SELECT * FROM TABLE_STUDENTCOURSE AS T1 RIGHT OUTER JOIN TABLE_STUDENT AS T2 ON T1.STUDENTID=T2.STUDENTID ORDER BY FIRSTNAME; 

--LEFT OUTER JOIN/LEFT JOIN.

SELECT * FROM TABLE_STUDENT T1 LEFT JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID; 

SELECT * FROM TABLE_STUDENTCOURSE AS T1 LEFT OUTER JOIN TABLE_STUDENT AS T2 ON T1.STUDENTID=T2.STUDENTID; 

--To know how many student have multiple courses.

SELECT * FROM TABLE_STUDENTCOURSE AS T1 LEFT OUTER JOIN TABLE_STUDENT AS T2 ON T1.STUDENTID=T2.STUDENTID ORDER BY SEMESTER; 

--FULL OUTER JOIN/FULL JOIN.

SELECT * FROM TABLE_STUDENT T1 FULL JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID; 

SELECT * FROM TABLE_STUDENTCOURSE AS T1 FULL OUTER JOIN TABLE_STUDENT AS T2 ON T1.STUDENTID=T2.STUDENTID; 

--SUBQUERIES.

SELECT * FROM TABLE_STUDENT;

SELECT * FROM TABLE_GENDER;


SELECT S.STUDENTID,S.FIRSTNAME,S.LASTNAME,G.NAME AS GENDER FROM TABLE_STUDENT S JOIN TABLE_GENDER G ON S.GENDERID=G.GENDERID;

SELECT STUDENTID,FIRSTNAME,LASTNAME,(SELECT NAME FROM TABLE_GENDER G WHERE S.GENDERID=G.GENDERID)AS GENDER,BIRTHDATE,EMAILADDRESS
FROM TABLE_STUDENT S; --Subquery will also show NULL values row while JOIN will not.

--CASE STATEMENT.

SELECT * FROM TABLE_STUDENT;

SELECT FIRSTNAME,MIDDLENAME,BIRTHDATE,
CASE GENDERID WHEN 1 THEN 'MALE'
              WHEN 2 THEN 'FEMALE'
			  WHEN 3 THEN 'RATHER NOT SAY'
	          ELSE 'UNKNOWN'
	END AS GENDER
FROM TABLE_STUDENT;

SELECT FIRSTNAME,MIDDLENAME,BIRTHDATE,
CASE 
WHEN BIRTHDATE>'1970' THEN 'The age is greater than 1970'
WHEN BIRTHDATE>'1980' THEN 'The age is greater than 1980'
WHEN BIRTHDATE>'1990' THEN 'The age is greater than 1990'
WHEN BIRTHDATE>'2000' THEN 'The age is greater than 2000'
WHEN BIRTHDATE>'2010' THEN 'The age is greater than 2010'
WHEN BIRTHDATE>'2020' THEN 'The age is greater than 2020'
ELSE 'UNKNOWN'
END AS DOB
FROM TABLE_STUDENT;

--TOP KEYWORD.

SELECT TOP 3 * FROM TABLE_STUDENT;

SELECT TOP 5 STUDENTID,FIRSTNAME,BIRTHDATE FROM TABLE_STUDENT;

--Write a query to retrieve top 5 youngest students.

SELECT TOP 5 * FROM TABLE_STUDENT ORDER BY BIRTHDATE DESC;

--DISTINCT KEYWORD.

--Write a query to retrieve distinct genderid from table.

SELECT DISTINCT GENDERID FROM TABLE_STUDENT;

SELECT DISTINCT BIRTHDATE FROM TABLE_STUDENT;

--IN OPERATOR

SELECT * FROM TABLE_STUDENT WHERE STUDENTID IN(1,6,34,88,876);

SELECT * FROM TABLE_STUDENT WHERE LASTNAME IN('BATES','COOPER','DENIALS');

--NOT IN OPERATOR

SELECT * FROM TABLE_STUDENT WHERE STUDENTID NOT IN(1,6,34,88,876);

--IS NULL

SELECT * FROM TABLE_STUDENT T1 LEFT OUTER JOIN Table_StudentCourse T2 ON T1.STUDENTID=T2.STUDENTID WHERE T2.STUDENTCOURSEID IS NULL;

--NOT NULL.

SELECT * FROM TABLE_STUDENT T1 LEFT OUTER JOIN Table_StudentCourse T2 ON T1.STUDENTID=T2.STUDENTID WHERE T2.STUDENTCOURSEID IS NOT NULL; --It will show matching rows.

--LIKE OPERATOR.

SELECT * FROM TABLE_STUDENT WHERE FIRSTNAME LIKE 'S%';

SELECT * FROM TABLE_STUDENT WHERE FIRSTNAME LIKE 'S%' AND LASTNAME LIKE 'G%';

SELECT * FROM TABLE_STUDENT WHERE LASTNAME LIKE '%G';

SELECT * FROM TABLE_STUDENT WHERE EMAILADDRESS LIKE '%YAHOO%';

--BETWEEN OPERATOR.

SELECT * FROM TABLE_STUDENT WHERE STUDENTID BETWEEN 16 AND 34;

SELECT * FROM TABLE_STUDENT WHERE STUDENTID BETWEEN 100 AND 150;

--NOT BETWEEN OPERATOR.

SELECT * FROM TABLE_STUDENT WHERE STUDENTID NOT BETWEEN 11 AND 22;

SELECT * FROM TABLE_STUDENT WHERE STUDENTID NOT BETWEEN 100 AND 120;

--GROUP BY.

SELECT GENDERID FROM TABLE_STUDENT GROUP BY GENDERID;

SELECT GENDERID,COUNT(*) FROM TABLE_STUDENT WHERE GENDERID=1 GROUP BY GENDERID;

--COUNT()

SELECT GENDERID,COUNT(GENDERID) AS TOTL FROM TABLE_STUDENT GROUP BY GENDERID;

--SUM()

SELECT T1.STUDENTID,(FIRSTNAME + ' '+MIDDLENAME+ ' '+LASTNAME) AS FULLNAME,SUM(CREDITHOUR)AS TOTAL 
FROM TABLE_STUDENT T1 JOIN TABLE_STUDENTCOURSE T2  ON T1.STUDENTID=T2.STUDENTID INNER JOIN
TABLE_COURSE T3 ON T2.COURSECODE=T3.COURSECODE
GROUP BY T1.STUDENTID,(FIRSTNAME + ' '+MIDDLENAME+ ' '+LASTNAME) 
ORDER BY T1.STUDENTID;

--MAX()

SELECT MAX(BIRTHDATE) FROM TABLE_STUDENT;

SELECT * FROM TABLE_STUDENT WHERE BIRTHDATE < (SELECT MAX(BIRTHDATE) FROM TABLE_STUDENT);

--MIN()

SELECT MIN(BIRTHDATE) FROM TABLE_STUDENT;

SELECT * FROM TABLE_STUDENT WHERE BIRTHDATE > (SELECT MIN(BIRTHDATE) FROM TABLE_STUDENT);

--HAVING

SELECT T1.STUDENTID,(FIRSTNAME + ' '+MIDDLENAME+ ' '+LASTNAME) AS FULLNAME,SUM(CREDITHOUR)AS TOTAL 
FROM TABLE_STUDENT T1 JOIN TABLE_STUDENTCOURSE T2  ON T1.STUDENTID=T2.STUDENTID INNER JOIN
TABLE_COURSE T3 ON T2.COURSECODE=T3.COURSECODE
GROUP BY T1.STUDENTID,(FIRSTNAME + ' '+MIDDLENAME+ ' '+LASTNAME) 
HAVING SUM(CREDITHOUR)>6
ORDER BY T1.STUDENTID;


--UNION

SELECT * FROM TABLE_STUDENT WHERE BIRTHDATE <= '1985-12-20'
UNION
SELECT * FROM TABLE_STUDENT WHERE GENDERID = 1;

SELECT * FROM TABLE_STUDENT WHERE BIRTHDATE <= '1985-12-20'
UNION
SELECT * FROM TABLE_STUDENT WHERE GENDERID = 1 ORDER BY LASTNAME;

--UNION ALL

SELECT * FROM TABLE_STUDENT WHERE BIRTHDATE <= '1985-12-20'
UNION ALL
SELECT * FROM TABLE_STUDENT WHERE GENDERID = 1;

SELECT * FROM TABLE_STUDENT WHERE BIRTHDATE <= '1985-12-20'
UNION ALL
SELECT * FROM TABLE_STUDENT WHERE GENDERID = 1 ORDER BY FIRSTNAME;

--INTERSECT.

SELECT * FROM TABLE_STUDENT WHERE BIRTHDATE <= '1985-12-20'
INTERSECT
SELECT * FROM TABLE_STUDENT WHERE GENDERID = 1;

--select all students who have atleast one course.

SELECT * FROM Table_Student;

SELECT * FROM Table_StudentCourse;

SELECT * FROM Table_Student T1 INNER JOIN Table_StudentCourse T2 ON T1.STUDENTID=T2.STUDENTID ORDER BY FIRSTNAME;

SELECT T1.STUDENTID,T1.FIRSTNAME,T2.COURSECODE 
FROM TABLE_STUDENT T1 INNER JOIN Table_StudentCourse T2 ON T1.STUDENTID=T2.STUDENTID 
GROUP BY T1.STUDENTID,T1.FIRSTNAME,T2.COURSECODE 
HAVING COUNT(*) = 1 ORDER BY FIRSTNAME;


--select all male students who have atleast one course

SELECT * FROM Table_Student T1 INNER JOIN Table_StudentCourse T2 ON T1.STUDENTID=T2.STUDENTID WHERE T1.GENDERID=1 ORDER BY FIRSTNAME;

SELECT T1.STUDENTID,T1.FIRSTNAME,T2.COURSECODE 
FROM TABLE_STUDENT T1 INNER JOIN Table_StudentCourse T2 ON T1.STUDENTID=T2.STUDENTID 
WHERE T1.GENDERID=1
GROUP BY T1.STUDENTID,T1.FIRSTNAME,T2.COURSECODE 
HAVING COUNT(*) = 1 ORDER BY FIRSTNAME;

--select all students who have atleast one course and those who don't have course.

SELECT * FROM Table_Student T1 FULL JOIN Table_StudentCourse T2 ON T1.STUDENTID=T2.STUDENTID WHERE T1.GENDERID=1 ORDER BY FIRSTNAME;

--select all female students 'Fullname'

SELECT * FROM TABLE_STUDENT;

SELECT (FIRSTNAME + ' '+ MIDDLENAME + ' ' + LASTNAME) AS FULLNAME,GENDERID FROM TABLE_STUDENT WHERE GENDERID=2;

--select top 2 courses

SELECT * FROM TABLE_COURSE;

SELECT TOP 2 * FROM TABLE_COURSE;

--select unique list of genders from student table.

SELECT DISTINCT GENDERID FROM TABLE_STUDENT;

SELECT DISTINCT GENDERID,COUNT(*) FROM TABLE_STUDENT GROUP BY GENDERID;

--select students whose ID is 2 or 5 or 17 or 32 or 7

SELECT * FROM TABLE_STUDENT WHERE STUDENTID IN (2,5,17,32,7);

--select students whose ID is different from 22 or 15 or 47 or 3 or 37

SELECT * FROM TABLE_STUDENT WHERE STUDENTID NOT IN (22,15,47,3,37);

--select all students who don't have any course.

SELECT * FROM TABLE_STUDENT WHERE STUDENTID NOT IN(SELECT STUDENTID FROM TABLE_STUDENTCOURSE);

SELECT * FROM TABLE_STUDENT WHERE STUDENTID NOT IN(SELECT DISTINCT STUDENTID FROM TABLE_STUDENTCOURSE);

--select all students whose middle name starts with 'a' and last name ends with 'r'

SELECT * FROM TABLE_STUDENT WHERE MIDDLENAME LIKE 'a%' AND LASTNAME LIKE '%r';

--select all male students whose birth date is in the range of '1995-01-01' and '2020-12-30'

SELECT * FROM TABLE_STUDENT WHERE GENDERID = 1 AND BIRTHDATE BETWEEN '1995-01-01' AND '2020-12-30';

--select student 'Fullname' and  count number of male students

SELECT (FIRSTNAME+' '+MIDDLENAME+' '+LASTNAME) AS FULLNAME,GENDERID
FROM TABLE_STUDENT 
WHERE GENDERID=1
GROUP BY (FIRSTNAME+' '+MIDDLENAME+' '+LASTNAME),GENDERID;

--select student 'Fullname' and count number of students who have atleast one course.

SELECT * FROM TABLE_STUDENT;

SELECT * FROM TABLE_STUDENTCOURSE;

SELECT (FIRSTNAME+' '+MIDDLENAME+' '+LASTNAME) AS FULLNAME,COUNT(*) AS TOTAL 
FROM TABLE_STUDENT T1 JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID
GROUP BY (FIRSTNAME+' '+MIDDLENAME+' '+LASTNAME) 
HAVING COUNT(*)>=1; 

--select student 'Fullname" and sum of credit hour for each student.

SELECT * FROM TABLE_STUDENT ORDER BY FIRSTNAME;

SELECT * FROM TABLE_COURSE;

SELECT (FIRSTNAME+' '+MIDDLENAME+' '+LASTNAME) AS FULLNAME, SUM(CREDITHOUR) AS TOTALHOUR
FROM TABLE_STUDENT
T1 JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID 
INNER JOIN TABLE_COURSE T3 ON T2.COURSECODE=T3.COURSECODE 
GROUP BY (FIRSTNAME+' '+MIDDLENAME+' '+LASTNAME);

--select student 'Fullname" and sum of credit hour for those students whose credit hour is greater thaN 4.

SELECT (FIRSTNAME+' '+MIDDLENAME+' '+LASTNAME) AS FULLNAME, SUM(CREDITHOUR) AS TOTALHOUR
FROM TABLE_STUDENT
T1 JOIN TABLE_STUDENTCOURSE T2 ON T1.STUDENTID=T2.STUDENTID 
INNER JOIN TABLE_COURSE T3 ON T2.COURSECODE=T3.COURSECODE 
GROUP BY (FIRSTNAME+' '+MIDDLENAME+' '+LASTNAME) HAVING SUM(CREDITHOUR)>4;

--join the result of the two requests
--select all female students
--select top 6 male students.

SELECT * FROM TABLE_STUDENT WHERE GENDERID=2
UNION
SELECT TOP 6 * FROM TABLE_STUDENT WHERE GENDERID=1;

SELECT * FROM TABLE_STUDENT WHERE GENDERID=2
UNION ALL
SELECT TOP 6 * FROM TABLE_STUDENT WHERE GENDERID=1;

--select the intersection/common data from the result of the two requests
--select all female students
--select top 6 male students.

SELECT * FROM TABLE_STUDENT WHERE GENDERID=2
INTERSECT
SELECT TOP 6 * FROM TABLE_STUDENT WHERE GENDERID=1;





