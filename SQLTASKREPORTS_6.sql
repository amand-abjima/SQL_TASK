USE SPORTSDB;

--Create data/entry in our database table.

--Here we are not insert ID column value because we apply IDENTITY operator on it, which will auto-increment ID column value.

INSERT INTO SPORT VALUES('KABADDI',1);

--READ data from table.

SELECT * FROM SPORT;

--UPDATE.

UPDATE SPORT SET NAME = 'CRICKET' WHERE ID = 2; --If we not specify WHERE condition then it will update all the rows.

--DELETE.

DELETE FROM SPORT; -- It will delete all the rows from table.

DELETE FROM SPORT WHERE ID =3; --It will delete specific record.

INSERT INTO TEAM VALUES('BARCELONA',1);

SELECT * FROM TEAM;
SELECT * FROM SPORT;

SELECT * FROM TEAM INNER JOIN SPORT ON SPORT.ID = TEAM.SPORTID;

SELECT SPORT.NAME AS [SPORT NAME],TEAM.NAME AS [TEAM NAME],SPORT.ISINDIVIDUAL FROM TEAM INNER JOIN SPORT ON SPORT.ID = TEAM.SPORTID;

--SELECT 
-- To select records from all the columns.

SELECT * FROM SALESLT.SALESORDERDETAIL;

--To select specific columns from the table.

SELECT SALESORDERID,ORDERQTY,PRODUCTID,LINETOTAL FROM SALESLT.SALESORDERDETAIL;

--To retrieve all the rows from a column.

SELECT SALESORDERID FROM SALESLT.SALESORDERDETAIL;

--To retrieve DISTINCT rows from a column.

SELECT DISTINCT SALESORDERID FROM SALESLT.SALESORDERDETAIL;

--WHERE.

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE MODIFIEDDATE = '2008-06-01' ;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE SALESORDERDETAILID >= 110618 ;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE ORDERQTY <= 4 ;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE ORDERQTY < 4 ;

--AND, OR, NOT.

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE MODIFIEDDATE = '2008-06-01' AND PRODUCTID=836 ;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE SALESORDERID=71780 AND ORDERQTY=6 ;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE SALESORDERID=71780 OR ORDERQTY=6 ;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE MODIFIEDDATE = '2008-06-01' OR PRODUCTID=836 ;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE MODIFIEDDATE = '2008-06-01' AND PRODUCTID=836 OR SALESORDERID=71774;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE MODIFIEDDATE = '2008-06-01' AND PRODUCTID != 836 ;

SELECT * FROM SALESLT.SALESORDERDETAIL WHERE SALESORDERDETAILID != 110619 AND PRODUCTID != 836 ;

--ORDER BY.

SELECT * FROM SALESLT.CUSTOMER;

SELECT FIRSTNAME,LASTNAME FROM SALESLT.CUSTOMER;

SELECT FIRSTNAME,LASTNAME FROM SALESLT.CUSTOMER ORDER BY FIRSTNAME;

SELECT FIRSTNAME,LASTNAME FROM SALESLT.CUSTOMER ORDER BY FIRSTNAME DESC,LASTNAME;

SELECT FIRSTNAME,LASTNAME FROM SALESLT.CUSTOMER ORDER BY 1;

SELECT FIRSTNAME,LASTNAME FROM SALESLT.CUSTOMER ORDER BY 1,2;

SELECT FIRSTNAME,LASTNAME FROM SALESLT.CUSTOMER ORDER BY 2,1;

--TOP.

SELECT TOP 5 FIRSTNAME FROM SALESLT.CUSTOMER;

SELECT TOP 10 FIRSTNAME,LASTNAME FROM SALESLT.CUSTOMER;

SELECT TOP 10 FIRSTNAME,LASTNAME FROM SALESLT.CUSTOMER ORDER BY FIRSTNAME;

--Select TOP 50 product names where the color is black and order by productmodelid.

SELECT * FROM SALESLT.PRODUCT;

SELECT TOP 50 * FROM SALESLT.PRODUCT WHERE COLOR = 'BLACK' ORDER BY PRODUCTMODELID;

--MAX() and MIN().

SELECT * FROM SALESLT.PRODUCT;

SELECT MAX(WEIGHT) FROM SALESLT.PRODUCT;

SELECT MAX(WEIGHT) FROM SALESLT.PRODUCT WHERE WEIGHT IS NOT NULL;

SELECT MIN(WEIGHT) AS MINIMUMWEIGHT FROM SALESLT.PRODUCT;

SELECT MIN(WEIGHT) AS MINIMUMWEIGHT FROM SALESLT.PRODUCT WHERE WEIGHT IS NOT NULL;

--LIKE.

SELECT * FROM SALESLT.CUSTOMER;

SELECT * FROM SALESLT.CUSTOMER WHERE LASTNAME = 'GEE';

SELECT * FROM SALESLT.CUSTOMER WHERE LASTNAME LIKE 'GEE';

SELECT * FROM SALESLT.CUSTOMER WHERE FIRSTNAME LIKE 'O%';

SELECT * FROM SALESLT.CUSTOMER WHERE LASTNAME LIKE 'G%';

SELECT * FROM SALESLT.CUSTOMER WHERE LASTNAME LIKE '%RZ%';

SELECT * FROM SALESLT.CUSTOMER WHERE LASTNAME LIKE '%G_R%';

--IN.

SELECT * FROM SALESLT.CUSTOMER WHERE FIRSTNAME = 'LUCY' OR FIRSTNAME = 'KEITH' OR FIRSTNAME = 'JHON';

SELECT * FROM SALESLT.CUSTOMER WHERE FIRSTNAME IN ('LUCY', 'KEITH', 'JHON');

--BETWEEN.

SELECT DISTINCT CUSTOMERID FROM SALESLT.CUSTOMER WHERE CUSTOMERID BETWEEN 2 AND 90;

SELECT DISTINCT CUSTOMERID FROM SALESLT.CUSTOMER WHERE CUSTOMERID >= 2 AND CUSTOMERID <= 90;

--COUNT(), AVG() and SUM().

SELECT * FROM SALESLT.CUSTOMER;

SELECT COUNT(*) FROM SALESLT.CUSTOMER;

SELECT DISTINCT COUNT(MIDDLENAME) FROM SALESLT.CUSTOMER;

SELECT * FROM SALESLT.PRODUCT;

SELECT AVG(LISTPRICE) FROM SALESLT.PRODUCT;

SELECT SUM(STANDARDCOST) AS TOTALCOST,AVG(LISTPRICE) AS TOTALAVERAGE FROM SALESLT.PRODUCT;

--ISNULL.

SELECT * FROM SALESLT.PRODUCT WHERE SELLENDDATE IS NULL;

SELECT ISNULL(WEIGHT,0) FROM SALESLT.PRODUCT;

--GROUP BY.

SELECT * FROM SALESLT.SALESORDERDETAIL;

SELECT SALESORDERID,SALESORDERDETAILID,SUM(UNITPRICEDISCOUNT) AS TOTALDISCOUNT,AVG(UNITPRICE),MAX(ORDERQTY) FROM SALESLT.SALESORDERDETAIL
WHERE ORDERQTY =1
GROUP BY SALESORDERID,SALESORDERDETAILID
ORDER BY SALESORDERDETAILID;

--HAVING.

SELECT * FROM SALESLT.PRODUCT;

SELECT NAME,COLOR,SUM(WEIGHT),MAX(PRODUCTMODELID) 
FROM SALESLT.PRODUCT 
WHERE COLOR = 'WHITE'
GROUP BY NAME,COLOR
HAVING MAX(PRODUCTMODELID) >=20;


SELECT NAME,COLOR,SUM(WEIGHT),MAX(PRODUCTMODELID) 
FROM SALESLT.PRODUCT 
GROUP BY NAME,COLOR
HAVING MAX(PRODUCTMODELID) <=20;


SELECT NAME,COLOR,SUM(WEIGHT),MAX(PRODUCTMODELID) 
FROM SALESLT.PRODUCT 
WHERE COLOR = 'WHITE'
GROUP BY NAME,COLOR
HAVING MAX(PRODUCTMODELID) <=20;

--NESTED QUERY.

SELECT * FROM SALESLT.PRODUCT;

SELECT * FROM SALESLT.PRODUCT WHERE ProductCategoryID IN(SELECT ProductCategoryID FROM SALESLT.PRODUCT WHERE COLOR = 'WHITE');

SELECT * FROM SALESLT.PRODUCT WHERE ProductID IN(SELECT ProductID FROM SALESLT.PRODUCT WHERE COLOR = 'BLACK');

--CASE.

SELECT DISTINCT COLOR,
CASE
WHEN COLOR = 'BLACK' THEN 'THE COLOR WAS BLACK'
WHEN COLOR = 'RED' THEN 'THE COLOR WAS RED'
ELSE 'INVISIBLE COLOR'
END
FROM SALESLT.PRODUCT;

--Temporary Tables.

SELECT PRODUCTID,NAME,COLOR,SIZE
INTO #TEMP
FROM SALESLT.PRODUCT
WHERE COLOR = 'BLACK';

SELECT * FROM #TEMP;

SELECT * FROM SALESLT.PRODUCT WHERE PRODUCTID IN(SELECT PRODUCTID FROM #TEMP);

--DATE Functions.

--Return the current date along with time.

SELECT GETDATE() AS CURRENTDATETIME;

--Return part of a date.

SELECT DATEPART(MONTH,GETDATE()) AS CURRENTDATE;

SELECT DATEPART(DAY,GETDATE()) AS CURRENTDATE;

--Difference between dates.

SELECT DATEDIFF(HOUR,'2023-08-10','2023-08-13');

--Convert dates.

SELECT CONVERT(VARCHAR(19),GETDATE());

SELECT CONVERT(VARCHAR(10),GETDATE(),10);

SELECT CONVERT(VARCHAR(10),GETDATE(),110);


Create Table table1
(
	personname varchar(25)
	,age int
)


Create Table table2
(
	personname varchar(25)
	,age int
)

Create Table table3
(
	personname varchar(25)
	,age int
)

Create Table table4
(
	personname varchar(25)
	,age int
)

-- Insert into tables 
Insert Into table1
Select 'John', 22
Insert Into table1
Select 'Jill', 25
Insert Into table1
Select 'Frank', 28
Insert Into table1
Select 'Sue', 31


Insert Into table2
Select 'Jill', 25
Insert Into table2
Select 'Frank', 28
Insert Into table2
Select 'Sue', 31
Insert Into table2
Select 'Mark', 35
Insert Into table2
Select 'Beth', 21

INSERT INTO TABLE3 VALUES('JILL',25);

SELECT * FROM TABLE1;

SELECT * FROM TABLE2;

SELECT * FROM TABLE3;

--INNER JOIN

SELECT * FROM TABLE1
INNER JOIN
TABLE2
ON TABLE1.AGE=TABLE2.AGE;


SELECT * FROM TABLE1
JOIN
TABLE2
ON TABLE1.PERSONNAME=TABLE2.PERSONNAME;

--LEFT JOIN

SELECT * FROM TABLE1;

SELECT * FROM TABLE2;

SELECT * FROM TABLE1
LEFT JOIN
TABLE2
ON TABLE1.AGE=TABLE2.AGE;


SELECT * FROM TABLE1
LEFT OUTER JOIN
TABLE2
ON TABLE1.PERSONNAME=TABLE2.PERSONNAME
WHERE TABLE2.PERSONNAME IS NOT NULL;

--RIGHT JOIN

SELECT * FROM TABLE1;

SELECT * FROM TABLE2;

SELECT * FROM TABLE1
RIGHT JOIN
TABLE2
ON TABLE1.AGE=TABLE2.AGE;


SELECT * FROM TABLE1
RIGHT OUTER JOIN
TABLE2
ON TABLE1.PERSONNAME=TABLE2.PERSONNAME
WHERE TABLE1.PERSONNAME IS NOT NULL;

--FULL OUTER JOIN.

SELECT * FROM TABLE1;

SELECT * FROM TABLE2;

SELECT * FROM TABLE1
FULL JOIN
TABLE2
ON TABLE1.AGE=TABLE2.AGE;


SELECT * FROM TABLE1
FULL OUTER JOIN
TABLE2
ON TABLE1.PERSONNAME=TABLE2.PERSONNAME
AND TABLE1.AGE=TABLE2.AGE;

--Joining multiple tables.

SELECT * FROM TABLE1
LEFT OUTER JOIN
TABLE2
ON TABLE1.PERSONNAME=TABLE2.PERSONNAME
RIGHT JOIN 
TABLE3
ON TABLE2.PERSONNAME=TABLE3.PERSONNAME;

SELECT * FROM TABLE1
LEFT OUTER JOIN
TABLE2
ON TABLE1.PERSONNAME=TABLE2.PERSONNAME
LEFT JOIN 
TABLE3
ON TABLE2.PERSONNAME=TABLE3.PERSONNAME;

--SET Operators.

--UNION

SELECT * FROM TABLE1
UNION 
SELECT * FROM TABLE2
UNION 
SELECT * FROM TABLE3;

--UNION ALL

SELECT * FROM TABLE1
UNION ALL
SELECT * FROM TABLE2
UNION ALL
SELECT * FROM TABLE3;

--INTERSECT

SELECT * FROM TABLE1
INTERSECT
SELECT * FROM TABLE2
INTERSECT
SELECT * FROM TABLE3;

--EXCEPT.

SELECT * FROM TABLE1
EXCEPT
SELECT * FROM TABLE2
EXCEPT
SELECT * FROM TABLE3;

--INSERT INTO SELECT

INSERT INTO TABLE4
SELECT * 
FROM TABLE3;

SELECT * FROM TABLE3;
SELECT * FROM TABLE4;

--INSERT

INSERT INTO TABLE4 VALUES('ROCK',44);

--UPDATE.

UPDATE TABLE4 SET AGE=34
WHERE PERSONNAME='ROCK';

--DELETE.

DELETE FROM TABLE4 WHERE AGE=34;

--TRUNCATE.

TRUNCATE TABLE TABLE4;

--VIEW

SELECT * FROM EMPLOYEE2;

CREATE VIEW CVIEW 
AS
SELECT * FROM EMPLOYEE2
WHERE GENDER='FEMALE';

SELECT * FROM CVIEW;


CREATE VIEW CVIEW1 
AS
SELECT EMPLOYEEID,NAME,SALARY FROM EMPLOYEE2
WHERE GENDER='FEMALE';

SELECT * FROM CVIEW1;

--STORED PROCEDURE.

SELECT * FROM EMPLOYEE2;

CREATE PROCEDURE GETEMP @SAL INT
AS
SELECT * FROM EMPLOYEE2
WHERE SALARY = @SAL

EXEC GETEMP 45000;

CREATE PROCEDURE GETEMP1 @ENM VARCHAR(20), @EXP VARCHAR(20)
AS
SELECT SALARY FROM EMPLOYEE2
WHERE NAME = @ENM AND EXPERIENCE = @EXP;

EXEC GETEMP1 'VIKRAM SINGH', '7 YEARS';

--Common Table Expression (CTE).

SELECT * FROM EMPLOYEE2;

WITH CTE1 AS (
SELECT * FROM EMPLOYEE2 WHERE DEPARTMENT = 'IT')
SELECT EMPLOYEEID,NAME,GENDER,SALARY FROM CTE1;

WITH
CTE1 AS (
   SELECT * FROM EMPLOYEE2 WHERE DEPARTMENT = 'IT'),
CTE2 AS (
   SELECT * FROM EMPLOYEE2 WHERE DEPARTMENT = 'FINANCE')
SELECT EMPLOYEEID, NAME, EXPERIENCE FROM CTE1
UNION ALL
SELECT EMPLOYEEID, NAME, EXPERIENCE FROM CTE2;

--JOIN LAB.

SELECT * FROM SALESLT.ADDRESS;
SELECT * FROM SALESLT.CUSTOMER;
SELECT * FROM SALESLT.CUSTOMERADDRESS;
SELECT * FROM SALESLT.PRODUCT;
SELECT * FROM SALESLT.PRODUCTCATEGORY;
SELECT * FROM SALESLT.PRODUCTDESCRIPTION;
SELECT * FROM SALESLT.PRODUCTMODEL;

SELECT T1.ADDRESSID,T1.CITY,T2.CUSTOMERID,T2.FIRSTNAME,T2.LASTNAME,T3.ADDRESSID,T3.ADDRESSTYPE
FROM SALESLT.ADDRESS T1
JOIN SALESLT.CUSTOMER T2
ON T1.ADDRESSID = T2.CUSTOMERID
JOIN SALESLT.CUSTOMERADDRESS T3
ON T2.CUSTOMERID = T3.ADDRESSID ;

SELECT T1.ADDRESSID,T1.CITY,T2.CUSTOMERID,T2.FIRSTNAME,T2.LASTNAME,T3.ADDRESSID,T3.ADDRESSTYPE
FROM SALESLT.ADDRESS T1
JOIN SALESLT.CUSTOMER T2
ON T1.ADDRESSID = T2.CUSTOMERID
JOIN SALESLT.CUSTOMERADDRESS T3
ON T2.CUSTOMERID = T3.ADDRESSID 
WHERE T1.STATEPROVINCE='TEXAS';

SELECT T1.ADDRESSID,T1.CITY,T2.CUSTOMERID,T2.FIRSTNAME,T2.LASTNAME,T3.ADDRESSID,T3.ADDRESSTYPE
FROM SALESLT.ADDRESS T1
JOIN SALESLT.CUSTOMER T2
ON T1.ADDRESSID = T2.CUSTOMERID
JOIN SALESLT.CUSTOMERADDRESS T3
ON T2.CUSTOMERID = T3.ADDRESSID 
WHERE T1.STATEPROVINCE='WASHINGTON';





