CREATE TABLE EMPLOYEE_PAYROLL
(
EMPID INT IDENTITY(1,1),
EMPNAME VARCHAR(50),
DESIGNATION VARCHAR(50),
[BASIC PAY] INT,
[HOUSE RENT ALLOWANCE] INT,
[CONVENCE ALLOWANCE] INT,
[MEDICAL ALLOWANCE] INT,
[GROSS PAY] AS [BASIC PAY] + [HOUSE RENT ALLOWANCE] + [CONVENCE ALLOWANCE] + [MEDICAL ALLOWANCE]  --NON-PERSISTED.
);

SELECT * FROM EMPLOYEE_PAYROLL;

INSERT INTO EMPLOYEE_PAYROLL VALUES('GAURAV','MANAGER',39000,7000,3000,6000);
INSERT INTO EMPLOYEE_PAYROLL VALUES('AMAN','DEVELOPER',15000,3000,1000,800);
INSERT INTO EMPLOYEE_PAYROLL VALUES('MAHI','HR',28000,5000,2000,5000);

--NOW WE WILL ADD CONSTANT COMPUTED COLUMN IN EMPLOYEE_PAYROLL TABLE.

ALTER TABLE EMPLOYEE_PAYROLL ADD [COMPANY_NAME] AS 'XYZ COMPANY';

--NOW WE WILL ADD FUUNCTION BASED COMPUTED COLUMN IN EMPLOYEE_PAYROLL TABLE.

ALTER TABLE EMPLOYEE_PAYROLL ADD [DATE] AS GETDATE();

DROP TABLE EMPLOYEE_PAYROLL;

--NOW WE WILL CREATE PERSISTED COLUMN'S TABLE.

CREATE TABLE EMPLOYEE_PAYROLL
(
EMPID INT IDENTITY(1,1),
EMPNAME VARCHAR(50),
DESIGNATION VARCHAR(50),
[BASIC PAY] INT,
[HOUSE RENT ALLOWANCE] INT,
[CONVENCE ALLOWANCE] INT,
[MEDICAL ALLOWANCE] INT,
[GROSS PAY] AS [BASIC PAY] + [HOUSE RENT ALLOWANCE] + [CONVENCE ALLOWANCE] + [MEDICAL ALLOWANCE]  PERSISTED /* THIS COLUMN WILL PHYSICALLY 
);                                                                                                             STORED IN A TABLE.*/

INSERT INTO EMPLOYEE_PAYROLL VALUES('GAURAV','MANAGER',39000,7000,3000,6000);
INSERT INTO EMPLOYEE_PAYROLL VALUES('AMAN','DEVELOPER',15000,3000,1000,800);
INSERT INTO EMPLOYEE_PAYROLL VALUES('MAHI','HR',28000,5000,2000,5000);

SELECT * FROM EMPLOYEE_PAYROLL;

/* If we UPDATE that column in which we derived a computed column then value of computed column automatically updated whether 
it is persisted computed column or non-persisted computed column. */

UPDATE EMPLOYEE_PAYROLL SET [BASIC PAY] = 50000 WHERE EMPID = 1;

--Computed columns can be used with SELECT statement. 

SELECT [GROSS PAY] FROM EMPLOYEE_PAYROLL;

--Computed columns can be used with WHERE clause. 

SELECT * FROM EMPLOYEE_PAYROLL WHERE [GROSS PAY] >35000;

--Computed columns can be used with ORDER BY clause.

SELECT * FROM EMPLOYEE_PAYROLL ORDER BY [GROSS PAY] ASC;

SELECT * FROM EMPLOYEE_PAYROLL ORDER BY [GROSS PAY] DESC;

--We can’t INSERT and UPDATE the values of computed columns.

UPDATE EMPLOYEE_PAYROLL SET [GROSS PAY] = 89000 WHERE EMPID = 1; /* IT WILL SHOW "The column "GROSS PAY" cannot be modified because 
                                                                it is either a computed column or is the result of a UNION operator." MESSAGE.*/

--We can add computed columns in existing table by using ALTER command. 

ALTER TABLE EMPLOYEE_PAYROLL ADD [COMPANY_NAME] AS 'XYZ COMPANY';

ALTER TABLE EMPLOYEE_PAYROLL ADD [DATE] AS GETDATE();

--We can DROP computed columns from existing table by using ALTER command.

ALTER TABLE EMPLOYEE_PAYROLL DROP COLUMN [GROSS PAY];

--We can’t create another computed column from one computed column. 

ALTER TABLE EMPLOYEE_PAYROLL ADD [BONUS] AS [GROSS PAY] + 2000; /* IT WILL SHOW "Computed column 'GROSS PAY' in table 'EMPLOYEE_PAYROLL' is not
                                                                allowed to be used in another computed-column definition." MESSAGE.*/


--ANOTHER EXAMPLE OF COMPUTED COLUMN.

CREATE TABLE PRODUCT_SALES
(
PID INT PRIMARY KEY IDENTITY,
PNAME VARCHAR(50),
QTY INT,
PRICE INT,
TOTAL_COST AS PRICE * QTY PERSISTED
);

INSERT INTO PRODUCT_SALES VALUES('SHOP',3,150);
INSERT INTO PRODUCT_SALES VALUES('SHOES',2,700);
INSERT INTO PRODUCT_SALES VALUES('SHAMPOO',6,180);

SELECT * FROM PRODUCT_SALES;

--CREATING INDEX ON COMPUTED COLUMN IN SQL.

CREATE TABLE PRODUCT_SALES1
(
PID INT PRIMARY KEY IDENTITY,
PNAME VARCHAR(50),
QTY INT,
PRICE INT,
TOTAL_COST AS PRICE * QTY 
);

INSERT INTO PRODUCT_SALES1 VALUES('SHOP',3,150);
INSERT INTO PRODUCT_SALES1 VALUES('SHOES',2,700);
INSERT INTO PRODUCT_SALES1 VALUES('SHAMPOO',6,180);
INSERT INTO PRODUCT_SALES1 VALUES('T-SHIRT',4,600);
INSERT INTO PRODUCT_SALES1 VALUES('JEANS',3,1200);
INSERT INTO PRODUCT_SALES1 VALUES('MAGGI',6,20);
INSERT INTO PRODUCT_SALES1 VALUES('CLOCK',3,480);
INSERT INTO PRODUCT_SALES1 VALUES('PERFUME',5,350);
INSERT INTO PRODUCT_SALES1 VALUES('BOTTLE',2,120);
INSERT INTO PRODUCT_SALES1 VALUES('MARKER',7,40);

SELECT * FROM PRODUCT_SALES1;

--NOW WE CREATE INDEX ON COMPUTED COLUMN.

CREATE INDEX IX_TOTALCOST ON PRODUCT_SALES1 (TOTAL_COST ASC); /* -> It is Non-Clustered Index.
                                                                -> This index created on Non persisted computed column.
																-> We were not declared Total_cost Computed column PERSISTED.
																-> But INDEX make it PERSISTED from own.
																-> If we use PERSISTED keyword with Computed columns then INDEX has no need
																to make it PERSISTED.
																-> If we are not using PERSISTED Keyword with computed column then INDEX 
																make it PERSISTED automatically. */

SP_HELPINDEX PRODUCT_SALES1;

SELECT * FROM PRODUCT_SALES1 WHERE TOTAL_COST > 2000;

--These values are updated when any other columns on which the computed columns depend are updated

UPDATE PRODUCT_SALES1 SET PRICE = 200 WHERE PID = 1;

SELECT * FROM PRODUCT_SALES1;

--DROP AN INDEX.

DROP INDEX IX_TOTALCOST ON PRODUCT_SALES1; 



