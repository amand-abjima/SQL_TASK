--OPERATORS

CREATE TABLE EMPLOYEE(EID INT PRIMARY KEY,ENAME VARCHAR(15),SALARY INT);

INSERT INTO EMPLOYEE VALUES(4,'SUMIT',39000);

--ADDITION

SELECT EID, ENAME, SALARY, SALARY+100 AS "TOTAL_SALARY" FROM EMPLOYEE;

SELECT EID, ENAME, SALARY, SALARY+EID AS "TOTAL" FROM EMPLOYEE;

--SUBTRACTION

SELECT EID, ENAME, SALARY, SALARY-1000 AS "TOTAL_SALARY" FROM EMPLOYEE;

SELECT EID, ENAME, SALARY, SALARY-EID AS "TOTAL" FROM EMPLOYEE;

--MULTIPLICATION

SELECT EID, ENAME, SALARY, SALARY*100 AS "TOTAL" FROM EMPLOYEE;

SELECT EID, ENAME, SALARY, SALARY*EID AS "TOTAL" FROM EMPLOYEE;

--DIVISION

SELECT EID, ENAME, SALARY, SALARY/100 AS "TOTAL" FROM EMPLOYEE;

SELECT EID, ENAME, SALARY, SALARY/EID AS "TOTAL" FROM EMPLOYEE;

--COMPARISON OPERATOR

--EQUAL TO 

SELECT * FROM EMPLOYEE WHERE SALARY=25000;

SELECT * FROM EMPLOYEE WHERE ENAME='GAURAV';

SELECT * FROM EMPLOYEE WHERE EID=3;

--GREATER THAN

SELECT * FROM EMPLOYEE WHERE SALARY>25000;

SELECT * FROM EMPLOYEE WHERE SALARY>20000;

SELECT * FROM EMPLOYEE WHERE EID>2;

--LESS THAN

SELECT * FROM EMPLOYEE WHERE SALARY<28000;

SELECT * FROM EMPLOYEE WHERE SALARY<40000;

SELECT * FROM EMPLOYEE WHERE EID<4;

--GREATER THAN EQUAL TO

SELECT * FROM EMPLOYEE WHERE SALARY>=25000;

SELECT * FROM EMPLOYEE WHERE SALARY>=20000;

SELECT * FROM EMPLOYEE WHERE EID>=2;

--LESS THAN EQUAL TO

SELECT * FROM EMPLOYEE WHERE SALARY<=28000;

SELECT * FROM EMPLOYEE WHERE SALARY<=40000;

SELECT * FROM EMPLOYEE WHERE EID<=4;

--NOT EQUAL TO

SELECT * FROM EMPLOYEE WHERE SALARY<>28000;

SELECT * FROM EMPLOYEE WHERE SALARY<>40000;

SELECT * FROM EMPLOYEE WHERE EID<>4;

--COMPOUND OPERATORS

--ADD EQUALS

UPDATE EMPLOYEE SET SALARY+=100 WHERE ENAME='AMAN';


--SUBTRAT EQUALS

UPDATE EMPLOYEE SET SALARY-=100 WHERE EID=2;


--MULTIPLY EQUALS

UPDATE EMPLOYEE SET SALARY*=100 WHERE ENAME='GAURAV';


--DIVIDE EQUALS

UPDATE EMPLOYEE SET SALARY/=100 WHERE ENAME='AMAN';


--MODULO EQUALS

UPDATE EMPLOYEE SET SALARY%=100 WHERE ENAME='VISHAL';


--BITWISE AND EQUALS

UPDATE EMPLOYEE SET SALARY &=100 WHERE ENAME='AMAN';

--BITWISE OR EQUALS

UPDATE EMPLOYEE SET SALARY |=100 WHERE EID=1;

--BITWISE EXCLUSIVE EQUALS

UPDATE EMPLOYEE SET SALARY ^=100 WHERE ENAME='AMAN';

--LOGICAL OPERATORS

--ALL

SELECT ALL ENAME FROM EMPLOYEE;


SELECT ALL EID FROM EMPLOYEE;


SELECT ALL * FROM EMPLOYEE;

--BETWEEN


SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 20000 AND 40000;

SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 25000 AND 40000;


SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 32000 AND 60000;


SELECT * FROM EMPLOYEE WHERE EID BETWEEN 2 AND 4;


SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 15000 AND 30000;

--IN


SELECT * FROM EMPLOYEE WHERE SALARY IN (25000,39000,40000);

SELECT * FROM EMPLOYEE WHERE EID IN (2,3,4);


SELECT * FROM EMPLOYEE WHERE ENAME IN ('AMAN','GAURAV');

--AND

SELECT * FROM EMPLOYEE WHERE ENAME = 'GAURAV' AND SALARY = 28000;

SELECT * FROM EMPLOYEE WHERE EID = 2 AND SALARY = 28000;

SELECT * FROM EMPLOYEE WHERE ENAME = 'AMAN' AND SALARY = 0;

--OR

SELECT * FROM EMPLOYEE WHERE ENAME = 'RAHUL' OR SALARY = 31000;

SELECT * FROM EMPLOYEE WHERE EID = 2 OR SALARY = 28000;

SELECT * FROM EMPLOYEE WHERE EID = 4 OR SALARY = 39000;

--ANY

SELECT * FROM EMPLOYEE WHERE SALARY > ANY (SELECT SALARY FROM EMPLOYEE WHERE SALARY > 25000);

SELECT * FROM EMPLOYEE WHERE EID > ANY (SELECT EID FROM EMPLOYEE WHERE EID > 2);

--LIKE

SELECT * FROM EMPLOYEE WHERE ENAME LIKE 'A%';

SELECT * FROM EMPLOYEE WHERE ENAME LIKE '__A%';

SELECT * FROM EMPLOYEE WHERE ENAME LIKE '%V';

--EXISTS

SELECT ENAME FROM EMPLOYEE WHERE EXISTS (SELECT ENAME FROM EMPLOYEE WHERE EMPLOYEE.EID = EMPLOYEE.EID AND SALARY < 20000);


SELECT ENAME FROM EMPLOYEE WHERE EXISTS (SELECT ENAME FROM EMPLOYEE WHERE EMPLOYEE.EID = EMPLOYEE.EID AND EID>3);


SELECT ENAME FROM EMPLOYEE WHERE EXISTS (SELECT ENAME FROM EMPLOYEE WHERE EMPLOYEE.EID = EMPLOYEE.EID AND SALARY < 30000);

--NOT

SELECT * FROM EMPLOYEE WHERE ENAME NOT LIKE 'A%';

SELECT * FROM EMPLOYEE WHERE EID NOT LIKE 4;

SELECT * FROM EMPLOYEE WHERE SALARY NOT LIKE 28000;

--UNION

CREATE TABLE FACEBOOK(FNAME VARCHAR(20),FLOCATION VARCHAR(20));

INSERT INTO FACEBOOK VALUES('VISHAL','NOIDA');

CREATE TABLE LINKEDIN(FNAME VARCHAR(20),FLOCATION VARCHAR(20));

INSERT INTO LINKEDIN VALUES('VISHAL','NOIDA');

SELECT * FROM FACEBOOK UNION SELECT * FROM LINKEDIN;

--UNION ALL

CREATE TABLE FACEBOOK(FNAME VARCHAR(20),FLOCATION VARCHAR(20));

INSERT INTO FACEBOOK VALUES('VISHAL','NOIDA');

CREATE TABLE LINKEDIN(FNAME VARCHAR(20),FLOCATION VARCHAR(20));

INSERT INTO LINKEDIN VALUES('VISHAL','NOIDA');

SELECT * FROM FACEBOOK UNION ALL SELECT * FROM LINKEDIN;

--ALTER COMMAND

CREATE TABLE HUMAN(ID INT,NAMES VARCHAR(20),AGE INT,CITY VARCHAR(20),HNO INT);

ALTER TABLE HUMAN ADD UNIQUE(HNO);

ALTER TABLE HUMAN ALTER COLUMN ID INT NOT NULL;

ALTER TABLE HUMAN ADD PRIMARY KEY(ID);

INSERT INTO HUMAN VALUES(20,'NIDHI',20,'AGRA',8677);

ALTER TABLE HUMAN ADD COUNTRY VARCHAR(20);

ALTER TABLE HUMAN DROP COLUMN COLUMN_NAME;

CREATE TABLE ORDERS(OID INT NOT NULL,CUSTOMER_ID INT);

ALTER TABLE ORDERS ADD FOREIGN KEY(OID) REFERENCES HUMAN(ID);












